/*
 * File: app/view/MainController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Booking.view.MainController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.bkgdtlviewport',

    id: 'MainControllerId',

    onCntrInfoAdd: function(button, e, eOpts) {
        Ext.getBody().mask();
        Ext.create('Ext.window.Window', {
            title: 'Container Info',
            //layout: 'fit',
            id: 'CntrInfoWindowAdderId',
            layout: {
                type: 'vbox',
                align: 'stretch'
                //padding: '10'
            },
            listeners: {
                close: {
                    scope: this,
                    fn: function () {
                        Ext.getBody().unmask();
                    }
                }
            },
            items: [
            {
                xtype: 'container',
                id: 'CntrInfoWndowId',
                padding: '10',
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [{
                    xtype: 'combobox',
                    fieldLabel: 'Container Type',
                    allowBlank: false,
                    displayField: 'code',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'CntrTypeStore',
                    valueField: 'code'
                },
                {
                    xtype: 'numberfield',
                    fieldLabel: 'Container Net Weight',
                    maxValue: 999999.99,
                    minValue: 0,
                    decimalPrecision: 2
                },
                {
                    xtype: 'numberfield',
                    fieldLabel: 'Container Gross Weight',
                    maxValue: 999999.99,
                    minValue: 0,
                    decimalPrecision: 2
                },
                {
                    xtype: 'combobox',
                    fieldLabel: 'Container Weight Unit',
                    allowBlank: false,
                    displayField: 'name',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'CntrWgtUntStore',
                    valueField: 'code'
                }]
            },
            {
                xtype: 'container',
                padding: '0 0 10 10',
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                items: [{
                    xtype: 'button',
                    text: 'Save',
                    listeners: {
                        click: {
                            scope: this,
                            fn: function () {
                                var cmp = Ext.getCmp('CntrInfoWndowId');
                                var containerCmp = cmp.items.getRange();
                                var store = Ext.getStore('CntrStore');
                                var errors = [], data = [];
                                var cntrType, cntrNet, cntrGross, cntrUnit;

                                //Get component errors
                                for(var i=0; i<containerCmp.length; i++){
                                    if(!Ext.isEmpty(containerCmp[i].getErrors())){
                                        errors.push(containerCmp[i].getErrors());
                                    }
                                }
                                if(errors.length > 0 ){
                                    var isMissingField = false;
                                    errors.forEach(function(i){
                                        if(i=='This field is required'){
                                            isMissingField = true;
                                        }
                                    });
                                    if(isMissingField){
                                        Ext.MessageBox.alert('Waring!','Please fill up all fields to add!');
                                    }else{
                                        Ext.MessageBox.alert('Waring!','Please correct all invalid fields!');
                                    }
                                }else{
                                    for(var x=0; x<containerCmp.length; x++){
                                        //data.push(containerCmp[x].getValue());
                                        if(x===0){
                                            cntrType = containerCmp[x].getValue();
                                        }else if(x===1){
                                            cntrNet = containerCmp[x].getValue();
                                        }else if(x===2){
                                            cntrGross = containerCmp[x].getValue();
                                        }else if(x===3){
                                            cntrUnit = containerCmp[x].getValue();
                                        }
                                    }
                                    data.push({CntrType:cntrType, CntrNet:cntrNet,
                                    CntrGross:cntrGross, CntrUnit:cntrUnit});
                                    store.add(data);
                                }
                            }
                        }
                    }
                }]
            }]
        }).show();
    },

    onCntrInfoDel: function(button, e, eOpts) {
        var cmp = Ext.getCmp('CntrInfoGridId');
        var selected = cmp.getSelection();
        var store = Ext.getStore('CntrStore');

        if(!Ext.isEmpty(selected)){
            store.remove(selected);
            //To remove all selected
            //store.removeAll(selected);
        }
    },

    onBkgSave: function(button, e, eOpts) {
        var bkgDetailCmp = Ext.getCmp('bookingDetailContainerId');
        var bkgValidation = Ext.getCmp('bookingValidationContainerId');

        console.log(bkgDetailCmp);
        console.log('test');
    }

});
